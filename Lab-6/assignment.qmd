---
title: 'Lab-6: Assignment'
author: Dheeraj Oruganty
format:
  html:
    self-contained: true
code-link: true
---

## Problem 1 : 

Discuss these following examples with your class mates and explain each case and comment on the results.


### a. Throwing Dice as Multinomial Distribution

A multinomial distribution is a distribution that shows the likelihood of the possible results of a experiment with repeated trials in which each trial can result in a specified number of outcomes that is greater than two. A multinomial distribution could show the results of tossing a dice, because a dice can land on one of six possible values. By contrast, the results of a coin toss would be shown using a binomial distribution because there are only two possible results of each toss, heads or tails.

Two additional key characteristics of a multinomial distribution are that the trials it illustrates must be independent (e.g., in the dice experiment, rolling a five does not have any impact on the number that will be rolled next) and the probability of each possible result must be constant (e.g., on each roll, there is a one in six chance of any number on the die coming up).


### b. Rolling a die N=100 times

what is happening here?

```{r}
#| vscode: {languageId: r}
one.dice <- function(){
  dice <- sample(1:6, size = 1, replace = TRUE)
  return(dice)
}
one.dice()
```

`one.dice()` function simulates a random integer in [1,6] with equal probabilities.

```{r}
#| vscode: {languageId: r}
#what is hapening here?

par(mfrow=c(2,2))

for (i in 1:4){
sims <- replicate(100, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
```

This block gives 4 plots to simulate each 100 times the `one.dice()` function's frequency table. We can see from the graph that they differ due to small sample sizes. If sample size is larger, we might observe better results. Each number is exibiting somewhat close probability to each other, as simulation sizes are relatively small.

### c. Rolling a die N=10000 times.

what is happening here?

```{r}
#| vscode: {languageId: r}
#what is hapening here?

par(mfrow=c(2,2))

for (i in 1:4){
sims <- replicate(10000, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
```

This block of code boosts the simulation to 10000 times. Because the sample size is large, the frequency between each number becomes closer to the theoretical probility. We can see that all outcomes are equally likely to happen as they happen almost the same number of times, as each of them appears 1/6 of the time.

## Problem 2. Multinomial distribution and its Marginals 

From the class example

![](images/2023-10-04-16-53-42.png)

Let's say that Molly, Ryan and Mr.Bob are buying beer(x1) ,bread(x2) and coke(x3) with probabilities (3/5,1/5,1/5).

a. What is the probability that only 1 of them will buy beer, 2 of them will buy Bread , none will buy coke ? Compare  the result with theoretical probability.

```{r}
#| vscode: {languageId: r}
set.seed(123)  # Setting a seed for reproducibility

# Number of simulations
n <- 100000

# Probabilities
probabilities <- c(3/5, 1/5, 1/5)
names(probabilities) <- c("beer", "bread", "coke")

# Simulate buying decisions
simulations <- replicate(n, sample(names(probabilities), 3, replace=TRUE, prob=probabilities))

# Count scenarios where 1 buys beer, 2 buy bread, and none buy coke
count <- sum(apply(simulations, 2, function(x) sum(x == "beer") == 1 & sum(x == "bread") == 2 & sum(x == "coke") == 0))

# Estimate probability
estimated_prob <- count / n
cat('simulation result:', estimated_prob)
```

theoretical result: 3 * 3/5 * 1/5 * 1/5 = 0.072


$ P(X_1 = n_1, X_2 = n_2, \ldots, X_k = n_k) = \frac{n!}{n_1! n_2! \ldots n_k!} p_1^{n_1} p_2^{n_2} \ldots p_k^{n_k} $

$ P(X_1 = 1, X_2 = 2, X_3 = 0) = \frac{1!}{1! * 2! * 0!} \frac{3}{5}^{1} \frac{1}{5}^{2} \frac{1}{5}^{0} $

b. Do a simulation for this scenario and plot the marginal distribution of x1.

```{r}
#| vscode: {languageId: r}
library(dplyr)
```

```{r}
library(plotly)
my_prob = c(0.6,0.4,0.4)
e2 <- rmultinom(n=10000, size=3, prob=my_prob)


dff2= t(data.frame(e2))
colnames(dff2) <- c("x1","x2","x3")
dff2<-data.frame(dff2)

#################### using plotly ############################

fig1 <- plot_ly(x = ~as.factor(dff2[,1]), type = "histogram",histnorm = "probability") %>%
  layout(title = 'Marginal of X1')
fig1
```

## Problem 3: 

**Discuss this with your class mates and comment on the Plots. What can you observe from each plot?**

Helpful links to answer this question:

-> Contour plot also gives the densities.

<https://blog.revolutionanalytics.com/2016/02/multivariate_data_with_r.html>

-> Then we have these ellipses; the circular symmetric version of complex normal distribution. <https://en.wikipedia.org/wiki/Elliptical_distribution>

ellipse: <https://en.wikipedia.org/wiki/Ellipse>

-> <http://cs229.stanford.edu/section/gaussians.pdf>


This tells you how when correlation coefficient increases the distribution spread and how the ellipses look like.
-> <https://online.stat.psu.edu/stat505/book/export/html/636>

```{r}
#| vscode: {languageId: r}
library(tidyverse)
library(mvtnorm)
library(plotly)
library(MASS)
library(ggplot2)
```

Source: https://data-se.netlify.app/2018/12/13/visualizing-a-multivariate-normal-distribution/

### Simulate multivariate normal data

First, let’s define a covariance matrix Σ:

```{r}
#| vscode: {languageId: r}
sigma <- matrix(c(4,2,2,3), ncol = 2)
sigma
```

Then, simulate observations n = n from these covariance matrix; the means need be defined, too. As the rank of our covariance matrix is 2, we need two means:

```{r}
#| vscode: {languageId: r}
means <- c(0, 0)
n <- 1000

set.seed(42)
x <- rmvnorm(n = n, mean = means, sigma = sigma)
str(x)
head(x)
```

You can see that X is bivariately normal distributed.

Let’s make a data frame out of it:

```{r}
#| vscode: {languageId: r}
d <- data.frame(x)
names(d)
```

## a. Plotting univariate (sampled) normal data

```{r}
#| vscode: {languageId: r}
## marginal of X1

d %>% 
  ggplot(aes(x = X1)) +
  geom_density()
```

This plot follows univariate normal distribution. This is marginal distribution of `X1` form dataframe `d`.

## b. Plot theoretic normal curve and compare with the above marginal distribution of X1.

```{r}
#| vscode: {languageId: r}
p1 <- data_frame(x = -3:3) %>% 
  ggplot(aes(x = x)) +
  stat_function(fun = dnorm, n = n)

p1
```

This plot is perfectly symmetric, because it is theoretical. It is almost identical to the above plot. The marginal distribution is lightly skewed, due to noise

## Plotting multivariate data

## c. 2D density

```{r}
#| vscode: {languageId: r}
p2 <- ggplot(d, aes(x = X1, y = X2)) +
  geom_point(alpha = .5) +
  geom_density_2d()

p2
```

This plot is joint distribution of `X1` and `X2`.

## e. Contour plot

Geom binhex <https://ggplot2.tidyverse.org/reference/geom_hex.html>

```{r}
#| vscode: {languageId: r}
p3 <- ggplot(d, aes(x = X1, y = X2)) +
  geom_point(alpha = .5) +
  geom_bin2d() +
  scale_fill_viridis_c()

p3
```

This plot represents the joint distribution of `X1` and `X2` and the color represents the number of times each combination of `X1` and `X2` appeared.

## f. 2D scatter plot and heatmap with plotly

```{r}
#| vscode: {languageId: r}
(p <- plot_ly(d, x = ~X1, y = ~X2))
```

```{r}
#| vscode: {languageId: r}
add_histogram2d(p)
```

These plots demonstrates the same output, only using plotly. 

## g. 2D cntour with plotly

```{r}
#| vscode: {languageId: r}
add_histogram2dcontour(p)
```

This is representing a contour map defining relations between `X1` and `X2`.

## h. 3D plot: Surface

```{r}
#| vscode: {languageId: r}
dens <- kde2d(d$X1, d$X2)

plot_ly(x = dens$x,
        y = dens$y,
        z = dens$z) %>% add_surface()
```

This is a 3D map representing the joint distribution of X1 and X2 from data frame d. It represents the number of times each combination of X1 and X2 happend in terms of Z value.

## i.  3D Scatter

First, compute the density of each (X1, X2) pair.

```{r}
#| vscode: {languageId: r}
d$dens <- dmvnorm(x = d)
```

Now plot a point for each (X1, X2, dens) tuple.

```{r}
#| vscode: {languageId: r}
p4 <- plot_ly(d, x = ~ X1, y = ~ X2, z = ~ dens,
              marker = list(color = ~ dens,
                            showscale = TRUE)) %>% 
  add_markers()

p4
```

This is a density map, where the saturation represents the density of `X1` and `X2`.

## Problem 4: Topic Modeling (No need to submit)

Try Topic Modeling on the `HPCorpus`. Where I have included Harry Potter Texts and the Lord of the Ring texts.

This article explains Topic Modeling in R very clearly (please follow it)
<https://www.tidytextmining.com/topicmodeling.html>

Also,please follow this article on "stopping words"
<https://smltar.com/stopwords.html>

